1.  构造函数的种类，
    
    并举例说明。





2.  class Test 
   
   { 
    
    public:

      Test(int a, int b)
      {
          m_a = a;
          m_b = b;
      }        
      Test(Test &t)
       
     {
           
        cout<<“拷贝构造函数被执行”<<endl;
	
      }
       
      ~Test()
        
      {
	   
           cout<<“析构函数被执行” <<endl;
       
       }
    
    
      int m_a;
      int m_b; 
    }
   
    

    void main(void)
   
    {
       
       Test t1, t2;
    
     }
   
    说明t1和t2析构函数的执行顺序


  。


3.   

 void test1() {
	Test t1(1, 2); 
	Test t2(t1); 
      }
     分析test1（）函数中t1 和 t2 构造函数和析构函数调用情景。

4.  void test2() {
	Test t1(1, 2);
	Test t2 = t1;
    }
    分析test2（）函数中t1 和 t2 构造函数和析构函数调用情景。



5.  void func(Test t) {
	cout << "func begin..." << endl;
	
	cout << "func end..." << endl;
	
   }

   void test3() {
	cout << "test3 begin..." << endl;
	Test t1(10, 20); 
	//调用func函数
	func(t1);
	
	cout << "test3 end..." << endl;
   }

   分析test3（）函数和 func（）函数中的 构造函数和析构函数调用情景。

6.
	Test gg() {  
		cout << "gg() begin..." << endl;
		Test temp(100, 200); //局部变量
		cout << "gg() before return temp" << endl;
		return temp;
	}

	void test4()
	{
		cout << "test4 begin..." << endl;
		gg(); 
		cout << "test4 end..." << endl;
	}

   分析test4（）函数和 gg（）函数中的 构造函数和析构函数调用情景。

7. 	Test gg() {  
		cout << "gg() begin..." << endl;
		Test temp(100, 200); //局部变量
		cout << "gg() before return temp" << endl;
		return temp;
	}

	void test5() {
		cout << "test5 begin ..." << endl;
		Test t1 = gg();	
		cout << "test5 end..." << endl;
 	}
    分析test5（）函数和 gg（）函数中的 构造函数和析构函数调用情景。

8. 	Test gg() {  
		cout << "gg() begin..." << endl;
		Test temp(100, 200); //局部变量
		cout << "gg() before return temp" << endl;
		return temp;
	}

       void test6()
       {
		cout << "test6 begin..." << endl;
		Test t1;
		t1 = gg(); 
		cout << "test6 end..." << endl;
	}

       析test6（）函数和 gg（）函数中的 构造函数和析构函数调用情景。

9. 简述类的默认拷贝构造函数深拷贝和浅拷贝的问题。

10. new 、 delete 和 malloc 和free的区别

11. static修饰的类成员变量和成员函数的特点。
    如何初始化一个static修饰的成员变量。
    如何使用一个static修饰的成员函数？



